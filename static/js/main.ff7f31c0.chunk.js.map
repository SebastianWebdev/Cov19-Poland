{"version":3,"sources":["functions/fetchStats.js","components/Country.js","components/App.js","serviceWorker.js","index.js"],"names":["fetchStats","a","fetch","response","json","data","console","log","Country","className","cases","deaths","critical","recovered","todayCases","todayDeaths","App","useState","setData","date","setDate","refresh","setTimeoutIndex","useEffect","then","filtered","filter","item","country","Date","toLocaleDateString","timeoutIndex","setInterval","countries","map","key","href","title","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ff7f31c0.chunk.js","sourcesContent":["const fetchStats = async () => {\r\n  try {\r\n    const response = await fetch(\r\n      \"https://coronavirus-19-api.herokuapp.com/countries\"\r\n    );\r\n    let data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\nexport default fetchStats;\r\n","import React from \"react\";\r\nimport \"../styles/country.css\";\r\nexport default function Country({ data }) {\r\n  // console.log(data);\r\n\r\n  return (\r\n    <div className=\"country_container\">\r\n      <div className=\"row-column\">\r\n        <h2 className=\"tittle\"> Statystyki Całkowite</h2>\r\n        <div className=\"row\">\r\n          <div className=\"item\">\r\n            <h2>Chorzy</h2>\r\n            <p className=\"stats\">{data.cases}</p>\r\n          </div>\r\n          <div className=\"item\">\r\n            <h2>Zgony</h2>\r\n            <p className=\"stats\">{data.deaths}</p>\r\n          </div>\r\n          <div className=\"item\">\r\n            <h2>Stan Krytyczny</h2>\r\n            <p className=\"stats\">{data.critical}</p>\r\n          </div>\r\n          <div className=\"item\">\r\n            <h2>Wyzdrowienia</h2>\r\n            <p className=\"stats\">{data.recovered}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row row-column\">\r\n        <h2 className=\"tittle\">Dzisiaj</h2>\r\n        <div className=\"row\">\r\n          <div className=\"item\">\r\n            <h2>Zachorowania</h2>\r\n            <p className=\"stats\">{data.todayCases}</p>\r\n          </div>\r\n          <div className=\"item\">\r\n            <h2>Zgony</h2>\r\n            <p className=\"stats\">{data.todayDeaths}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\n\nimport \"../styles/App.css\";\nimport fetchStats from \"../functions/fetchStats\";\nimport Country from \"./Country\";\nfunction App() {\n  const refreschtime = 10; // time in minutes\n  const [data = [], setData] = useState();\n  const [date, setDate] = useState();\n  const [refresh, setRefresh] = useState(1000 * 60 * refreschtime);\n  const [timeoutIndex, setTimeoutIndex] = useState();\n  useEffect(() => {\n    // initial data fetch\n    fetchStats().then(data => {\n      const filtered = data.filter(item => item.country === \"Poland\");\n      setData(filtered);\n    });\n    //set Date\n    const date = new Date().toLocaleDateString();\n    setDate(date);\n    //Set interwal of refresching data\n    const timeoutIndex = setInterval(() => {\n      //fetching data\n      fetchStats().then(data => {\n        const filtered = data.filter(item => item.country === \"Poland\");\n        setData(filtered);\n      });\n      //set Date\n      const date = new Date().toLocaleDateString();\n      setDate(date);\n    }, refresh);\n    // set timeout index\n    setTimeoutIndex(timeoutIndex);\n  }, []);\n  const countries = data.map(item => (\n    <Country data={item} key={item.country} />\n  ));\n\n  return (\n    <div className=\"main-container\">\n      <h1 className=\"main__tittle\">SARS-CoV-2 w Polsce</h1>\n      <p className=\"sub__tittle\"> stan na dzień : {date}</p>\n      {countries}\n      <div className=\"icons__info\">\n        Icons made by\n        <a\n          href=\"https://www.flaticon.com/authors/vectors-market\"\n          title=\"Vectors Market\"\n        >\n          Vectors Market\n        </a>\n        from\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n          www.flaticon.com\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n//register(); //is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}